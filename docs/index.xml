<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to Corda Guide記事 – </title>
    <link>/docs/</link>
    <description>Recent content on Welcome to Corda Guide記事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 21 Aug 2021 19:37:43 +0900</lastBuildDate>
    
	  <atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Corda State Machine 概要</title>
      <link>/docs/understanding_corda/general_concepts/corda-state-machine/</link>
      <pubDate>Sat, 21 Aug 2021 19:37:43 +0900</pubDate>
      
      <guid>/docs/understanding_corda/general_concepts/corda-state-machine/</guid>
      <description>
        
        
        &lt;p&gt;

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;この記事はR3ブログから翻訳されています。英文オリジナルの記事は&lt;a href=&#34;https://www.corda.net/blog/overview-of-the-corda-state-machine/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;

CordaのFlowは、KotlinまたはJavaを用いて、分岐のない一連のないプログラムとして記述できます。しかし、実行時には多くの分岐や補完的な動作が発生します。例えば・・&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checkpointでの状態保存（障害耐性確保の為）&lt;/li&gt;
&lt;li&gt;SubFlowの実行&lt;/li&gt;
&lt;li&gt;他のノードへのメッセージ送信とその後の受信待機&lt;/li&gt;
&lt;li&gt;非同期呼び出しと、その結果待ち&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等です。&lt;/p&gt;
&lt;p&gt;Cordaは、Quasar fiber をベースにしたState Machine上で動作することで、こうした分岐／補完動作を実現しています。&lt;/p&gt;
&lt;p&gt;この記事は、こうした動作の概要を説明することが目的です。動作を理解することで、Cordaノードの運用を行うにあたっての基礎になると考えます。&lt;/p&gt;
&lt;h3 id=&#34;注意事項&#34;&gt;注意事項&lt;/h3&gt;
&lt;p&gt;概念の説明を中心に行っていて、エラー処理を無視しています。Cordaのステートマシン/フローフレームワーク/ P2Pメッセージングに実際に変更を加える場合は、もう少し詳細を理解する必要があります。技術的詳細については&lt;a href=&#34;https://docs.corda.net/contributing-flow-internals.html?highlight=state%20machine#flow-framework-internals&#34;&gt;Cordaの英文ドキュメントサイト&lt;/a&gt;をご覧ください。
現在の実装に基づいて説明していますが、将来変更される可能性があります。CorDappを作成する場合は、公式のドキュメントとAPIに基づいて設計してください。ドキュメントを理解する助けとなる事がこの記事の目的であって、技術的な代替手段を検討するためのものではありません。&lt;/p&gt;
&lt;h1 id=&#34;quasarとは&#34;&gt;Quasarとは？&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.paralleluniverse.co/quasar/&#34;&gt;Quasar&lt;/a&gt;は、Javaバイトコードの巧妙な書き換えと例外を利用して、継続（contiuation、情報処理用語でプログラムの実行に関して、ある時点で中断され、評価されていない残りのプログラムを再度実行する機能を指す）を提供するJavaライブラリです。&lt;/p&gt;
&lt;p&gt;Quasarにおけるもっとも重要な概念はfiberです。fiberとは、プログラムコードにおけるスレッドのようなものですが、fiberは自らを一時停止できます。その時点で、その計算状態を保存することができます。保存された状態を元に戻し、そこから再び計算を始めることができます。&lt;/p&gt;
&lt;p&gt;さて、この機能を実現する仕組みをまずは学びましょう。&lt;/p&gt;
&lt;p&gt;ユーザーは，中断可能であるすべての関数に対して&lt;code&gt;@Suspendable&lt;/code&gt;というアノテーションをつける必要があります。起動時とJITコンパイルの直前に、Quasarは，&lt;code&gt;@Suspendable&lt;/code&gt;メソッドのバイトコードを書き換えます。具体的には、&lt;code&gt;throws SuspendExecution&lt;/code&gt;を関数定義に追加し,全ての&lt;code&gt;catch&lt;/code&gt;ブロックに、&lt;code&gt;SuspendExecution&lt;/code&gt;を再スローするコードを追加します。この例外をユーザーコードでキャッチさせないためです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/understanding_corda/corda-state-machine-1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;fiberを中断するために、プログラムはQuasarの特定の関数（例えば?&lt;code&gt;parkAndSerialize&lt;/code&gt;）を呼び出します。この関数は&lt;code&gt;SuspendExecution&lt;/code&gt;を投げ、投げられたこの例外はすべてのユーザーコードを通過し、Quasarによってキャッチされます。Quasarは、コールスタックを抽出し、シリアライズして保存します。バイトコードインストゥルメンテーション（byte code instrumentation）は、コールスタック上の関数が使用する変数、ローカルオブジェクト、スレッドが使用しているローカルストレージ等の値を全て確保でき、fiberはこのひと固まりのスレッドを再構成することができます。また、これらすべてをメモリに保存した後、CPUは現在の実行スレッドを解放するので、CPUは他の何かを実行するためにこの実行スレッドを利用可能になります。&lt;/p&gt;
&lt;p&gt;ファイバーを復元すると、コールスタックが新しいスレッドで再作成され、すべての値が記録されたとおりに関数に渡され、スレッドのローカルストレージが復元され、停止したところから実行が続行されます。&lt;/p&gt;
&lt;p&gt;これを機能させるには、中断するスタック内のすべての関数に&lt;code&gt;@Suspendable&lt;/code&gt;アノテーション付けて、クエーサーがそれらを計測できるようにすることが重要です。そうしないと、例外がキャッチされるか、パラメーターが正しくキャプチャされず、fiberが正しく中断されません。これは、CorDappsのエラーの一般的な原因（transaction context missingエラーなど）であり、スタックのどの関数に注釈が欠けているかを把握するのは非常に難しい場合があります。&lt;/p&gt;
&lt;p&gt;CordaのFlowはQuasarをラップし、それを使用して、CorDappのflow logic実装に含まれるKotlinまたはJavaのコードを、一時停止可能なコードに変換します。一時停止可能だと指定した場所をcheckpointと呼び、システムは任意のcheckpointからコードを再実行できる事が保証されます。&lt;/p&gt;
&lt;h1 id=&#34;flowの状態遷移&#34;&gt;Flowの状態遷移&lt;/h1&gt;
&lt;p&gt;さて、FlowがCheckPointで中止＆再開できる仕組みを見てきたところで、次にFlowの状態遷移についてみていきましょう。FlowはQuasarによる一時停止機能がある事を前提に、次のような状態遷移を想定しています。&lt;/p&gt;
&lt;p&gt;まず、すべてのフローはPending状態から始まります。次にrunningに移行します。最も簡単なケースでは、最終的にコードの最後に到達してsuccessに移行し、結果が返されます。コード途中で指定され、保存されていたCheckPointは全て消去されます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/understanding_corda/corda-state-machine-2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;エラーが発生した場合はErroedに移行し、&lt;code&gt;FlowHospital&lt;/code&gt;が管理することになります。&lt;code&gt;FlowHospital&lt;/code&gt;では3つの可能性があります。&lt;/p&gt;
&lt;p&gt;一時的なエラーの場合、Pendingに戻って再実行されます。この時、Flowは最初から実行されるのではなく、記録された最後のチェックポイントから再試行されます。
エラーが致命的である場合、フローは失敗Failedとして終了します。エラーが呼び出し元に返され、すべてのCheckPointが削除されます。
エラーを単純に再試行することはできないが、失敗させることができない場合（たとえば、元帳の整合性が失われる可能性がある場合など）、Flowはheld状態に移行します。hold状態の解消には、次のような人間の介入が必要です。
エラーの原因となった状態を修正する。
最後のCheckPointから手動でフローを再開する。（現状、これはNodeの再起動によって実現します。将来のリリースでRPCによる再開が実装される予定です）&lt;/p&gt;
&lt;h1 id=&#34;flowのライフサイクル&#34;&gt;Flowのライフサイクル&lt;/h1&gt;
&lt;p&gt;Flowのライフサイクルを考えるとき、Cordaノードを「ユーザースペース」と「カーネルスペース」に分けて考えると便利です。「ユーザースペース」は、ユーザーが提供するFlow logicを実行し、「カーネルスペース」は、ユーザーの提供するコードを実行するFlowフレームワークです。&lt;/p&gt;
&lt;p&gt;典型的なフローはあるスレッドで実行が開始され、ネットワーク上の他のノードに送付され、帰ってきたレスポンスを受けて再開するという流れをたどります。この流れの詳細を確認していきましょう。&lt;/p&gt;
&lt;p&gt;![image]/docs/images/understanding_corda/corda-state-machine-3.png)&lt;/p&gt;
&lt;h2 id=&#34;1-flowの開始&#34;&gt;1. Flowの開始&lt;/h2&gt;
&lt;p&gt;RPCを介してFlowがキックされると、&lt;code&gt;StartFlow&lt;/code&gt;がカーネルスペースで呼び出されます。これにより、Flowを開始するイベントがスケジュールされます（RPC処理とメッセージのデシリアライズ処理は別のスレッドプールで行われることに注意してください）CPUの実行スレッドが使用可能になるとすぐに、メッセージの処理を開始し、FlowはPendingからRunningに移行します。この作業には以下の作業も含まれます。&lt;/p&gt;
&lt;p&gt;スレッドを取得する。
データベース接続を取得して（fiberを保存するための）トランザクションを開く。
CorDappから要求されたFlowLogicをインスタンス化し、必要なパラメータを渡す。
FlowLogicのrun関数を呼び出す。&lt;/p&gt;
&lt;h2 id=&#34;2-実行と一時停止&#34;&gt;2. 実行と一時停止&lt;/h2&gt;
&lt;p&gt;次に、ユーザーコードは、一時停止が必要なポイントに到達するまで実行されます。一時停止の最も一般的な条件は次のとおりです。&lt;/p&gt;
&lt;p&gt;メッセージを送信した場合
FlowLogic.sleep()の呼び出し。つまり、明示的に一定時間Flowを一時停止する場合
Flow非同期API（&lt;code&gt;FlowLogic.await()&lt;/code&gt;）の使用&lt;/p&gt;
&lt;p&gt;ここでは、Flowが他の一つのノードと&lt;code&gt;sendAndReceive()&lt;/code&gt;を用いて通信する。この関数はカーネル空間を呼び出し、次のことを行います。&lt;/p&gt;
&lt;p&gt;ペイロードをシリアル化して、この関数に渡します。
メッセージを送信キューに入れると、P2Pメッセージングシステムによってピックアップされます。（P2PメッセージングシステムArtemisは、それだけで一つの記事が書けるほどのものです。ここでは、このシステムは頑健で、正確に1度だけメッセージを送信することができることだけを述べます。）このシステムによって、メッセージが正しく配信され（いずれ）返信を受け取ることができると想定できます。
次に、Quasarの&lt;code&gt;parkAndSerialize&lt;/code&gt;関数を呼び出して、前節で示した通りコールスタック他の情報を記録します。
ノードはこのFlowに割り当てられたリソースの中で、Quasarが無視してしまう部分の後処理をする必要もあります。典型的には、開いているデータベーストランザクションをコミットして、データベース接続を解放する必要があります．他のリソース（ロックなど）も同様に処理する必要があります。これはCordaコードで行われます。
Cordaはまた、Checkpointでのコピーをデータベースに保存するため、中断されたフローも再起動することができます。
Kryoシリアライザーを使用するので、スタック上で見つかったものはすべてシリアル化できます。これは、RPCおよびP2P通信で使用されるシリアライザやStatesをデータベースに保存する際に使われるシリアライザとは異なる仕組みです。通信用やState用はその内容に制約や制限が必要ですが、CheckPoint用シリアライザは、すべてを受け入れる必要があります。一方で、データ形式や構造の変化に対処する必要はありません。
シリアルの際に無視する必要のあるもの（主にノードやState Machineそのものなどで、デシリアライズ処理時にも当然にメモリ上に存在するモノ）のリストがあります。
特定のクラス（Cordaサービスなど）は&lt;code&gt;SerializeAsToken&lt;/code&gt;インターフェースを実装していて、クラスインスタンスの代わりにトークン化したデータだけが記録されます。これらのクラスは、デシリアライズ処理の際にインスタンスを取得するメカニズムを別途指定する必要があります。特にシングルトンクラスをシリアライズする時に役立ちます。&lt;/p&gt;
&lt;p&gt;その後、fiberはRunningからSuspendedに移行し、CPUの実行スレッドは他のタスクを実行できるようになります。&lt;/p&gt;
&lt;h2 id=&#34;3-メッセージ受信と再開&#34;&gt;3. メッセージ受信と再開&lt;/h2&gt;
&lt;p&gt;送信したメッセージに対する応答メッセージが到着すると、P2Pメッセージングシステムは、fiberへ再起動を促すメッセージをイベントキューに置きます。CPUの実行スレッドが使用可能になると、中断されたfiberの状態遷移が次ようにして再開します。&lt;/p&gt;
&lt;p&gt;コールスタックと変数が再作成されます
リソースが再取得されます（例えば，DB接続およびトランザクションが開かれます）
受信したメッセージはデシリアライズされます
受信メッセージは、Flowが再びSuspendedするか、終了したときにのみP2Pメッセージングシステム上から削除されます。何らかのエラーに伴うフェイルオーバーが起きた場合、フローはメッセージ送信直後のチェックポイントから再実行され、P2Pメッセージングキューからメッセージを再受信します。
次に、ユーザー空間のFlowLogicが、&lt;code&gt;sendAndReceive&lt;/code&gt; を叩いた時点の状態で呼び出され、メッセージの内容を関数呼び出しの戻り値として渡します。&lt;/p&gt;
&lt;h2 id=&#34;4-実行完了&#34;&gt;4. 実行完了&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FlowLogic&lt;/code&gt;が最後まで正常に完了すると、制御はカーネル空間に戻り、次の処理が行われます。&lt;/p&gt;
&lt;p&gt;データベーストランザクションがコミットされます
このフローのすべてのCheckPointがデータベースから削除されます。
P2Pメッセージングシステムに保存されていた未処理のメッセージはキューから削除されます。
関数戻り値はRPCプールに渡されます。シリアル化されて呼び出し元のクライアントに送り返すことになります。
データベース接続が解放され、fiberが終了し、CPUの実行スレッドが解放されます。&lt;/p&gt;
&lt;h1 id=&#34;含意&#34;&gt;含意&lt;/h1&gt;
&lt;p&gt;この上記の実装は、CorDappsの開発者にいくつかの影響を与えます&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;別途、生のJDBC接続を張りに行っても通常のACIDデータベースロジックをCorDappsで単純に使用することはできません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flow logic中で、DBを単純にコミットすることはできません（FlowLogic.sleep(1.millis)は妥当で現実的な回避策です）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一時停止により、想定外のDBコミットが発生する可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flowが失敗した場合、DBトランザクションはロールバックされます。使用しているJDBC接続で別途何かを行った場合、それは失われます。再試行すると、フローは最後のメッセージから再開されるため、DBトランザクションが再発生します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBトランザクションをロールバックすることはできません。FlowLogic内はFlowベースのトランザクション内にいるためです。SQLコードを直接記述して何か問題が発生し、ロールバックした場合、元帳の整合性が脅かされる可能性があります&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flowのすべての部分が少なくとも1回実行されます。ただし、問題が発生した場合、最後のCheckpointからエラーが発生したポイントの間の部分が再実行されます。Flowは、ロールバックを介して発生するすべてのDBトランザクションをクリアしてクリーンに再実行できるようにしますが、サードパーティコンポーネントとの他のやり取りは、べき等であるか、複数回の呼び出しを処理できる必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Suspendable&lt;/code&gt;アノテーションは、非常に注意深く使用なければなりません。&lt;code&gt;@Suspendable&lt;/code&gt; ではない関数から、&lt;code&gt;@Suspendable&lt;/code&gt;な関数を呼ぶことはできません。（逆は問題はありません。&lt;code&gt;@Suspendable&lt;/code&gt; な関数からデータベース操作などの&lt;code&gt;@Suspendable&lt;/code&gt;ではない関数を呼び出すことは可能です。）
バイトコードのスキャン/再読み込みは、かなり時間がかかります。サスペンド操作は安価ではありません。
バイトコードインストゥルメンテーション（byte code instrumentation）がうまくできないコードを書いてしまう事があります。（例えば、Kotlinの?.map{}操作内で&lt;code&gt;@Suspendable&lt;/code&gt;関数を使用する等）この場合、再生成されるバイトコードが無効化され、JVMが実行時にあきらめる可能性があります。これは&lt;a href=&#34;(https://youtrack.jetbrains.com/issue/KT-19251)&#34;&gt;Kotlinの既知の問題&lt;/a&gt;であり、この問題が発生した場合、以下のようなコンパイルオプションを指定することで改善できます。
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;compileKotlin&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
     &lt;span style=&#34;color:#000&#34;&gt;kotlinOptions&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt; 
          &lt;span style=&#34;color:#000&#34;&gt;freeCompilerArgs&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;-Xnormalize-constructor-calls=enable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
     &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: DockerComposeを使用したネットワークブートストラップする</title>
      <link>/docs/corda-4/developers/cordapp_development/docker-bootstrap/</link>
      <pubDate>Thu, 29 Jul 2021 11:30:24 +0900</pubDate>
      
      <guid>/docs/corda-4/developers/cordapp_development/docker-bootstrap/</guid>
      <description>
        
        
        &lt;p&gt;Dockerformは、CordaノードをDockerコンテナのローカルに簡単にデプロイすることができます。&lt;/p&gt;
&lt;p&gt;これは、Cordaのgradleプラグインが提供するタスクで、Network Bootstrapperが生成したアウトプットを使って、ブートストラップされたCordaネットワークを簡単に起動するために使用できる&lt;code&gt;docker-compose.yml&lt;/code&gt;ファイルを自動的に生成します。&lt;/p&gt;
&lt;p&gt;Network Bootstrapperの公式ドキュメントは&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/network-bootstrapper.html#network-bootstrapper&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;メリット&#34;&gt;メリット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Network Bootstrapper（こちらでも説明しています）構築を簡略化できるdocker-compose.yamlを自動的に作成します。これにより手動での構築が不要になります。&lt;/li&gt;
&lt;li&gt;Cordaノードとそのデータベースの両方のデプロイメントをより適切に制御できるようになります。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.corda.net/docs/corda-enterprise/4.8/operations/deployment/deployment-kubernetes.html&#34;&gt;Kubernetes&lt;/a&gt;でも使用可能な公式&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/docker-image.html#official-corda-docker-image&#34;&gt;Dockerイメージ&lt;/a&gt;の使用方法を理解することができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ウォークスルー事例&#34;&gt;ウォークスルー事例&lt;/h2&gt;
&lt;p&gt;ドキュメントには、Dockerformがどのように機能するかが非常によく説明されています。ここでは、R3のGitHubにあるCorDappのサンプルを見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/corda/samples-kotlin/tree/master/Features/dockerform-yocordapp&#34;&gt;https://github.com/corda/samples-kotlin/tree/master/Features/dockerform-yocordapp&lt;/a&gt; .&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;Dockerformについてのドキュメントは&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/generating-a-node.html#use-cordform-and-dockerform-to-create-a-set-of-local-nodes-automatically&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;buildgradleの新しいタスク&#34;&gt;build.gradleの新しいタスク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;外部からSSHでDockerコンテナに接続するために必要な &amp;ldquo;sshdPort &amp;ldquo;を追加します
&lt;ul&gt;
&lt;li&gt;ノードに使用する公式Corda Docker Imageを宣言します&lt;/li&gt;
&lt;li&gt;外部からSSHでDockerコンテナに接続するために必要な &amp;ldquo;sshdPort &amp;ldquo;を追加します&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/docs/images/developers/docker-1.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;h3 id=&#34;preparedockernodes-タスクを実行する&#34;&gt;prepareDockerNodes &amp;ldquo;タスクを実行する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;./gradlew prepareDockerNodes&lt;/code&gt;を実行すると、&lt;code&gt;/build/nodes&lt;/code&gt;フォルダ内に以下のようなアウトプットが作成されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt;は、&lt;code&gt;prepareDockerNodes&lt;/code&gt;タスクから取得した情報で自動的に生成されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/docs/images/developers/docker-2.png&#34; alt=&#34;drawing&#34; style=&#34;width:300px;&#34;/&gt;
&lt;p&gt;以下は、&lt;code&gt;docker-compose.yaml&lt;/code&gt;の内容です。Dockerのすべてのボリュームが、&lt;code&gt;build/nodes&lt;/code&gt;内に生成されたフォルダに関連付けられています。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-3.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;h3 id=&#34;外部データベースを追加する&#34;&gt;外部データベースを追加する&lt;/h3&gt;
&lt;p&gt;上記の例ではH2データベースを使用していますが、他のデータベースを追加することも可能です。DockerformがDockerコンテナの作成を行います。PostgreSQLを使った例を見てみましょう。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;こちらの内容は、&lt;a href=&#34;https://www.notion.so/JP-Docker-Compose-Corda-Dockerform-8fd2801bee984865ba2822ee018ad6d4#4c0677cf98d84e9d8bb8274c63c28d96&#34;&gt;こちら&lt;/a&gt;のドキュメントにも記載されています。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;ドキュメントに記載されている手順が完了したら、&lt;code&gt;./gradlew prepareDockerNodes&lt;/code&gt;を実行します。ここでは、出力と&lt;code&gt;docker-compose.yaml&lt;/code&gt; が更新されます。PostgreSQLのパラメータを設定した新しいサービスである&lt;code&gt;notary-db&lt;/code&gt;があります。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-4.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;p&gt;また、Dockerformは上記のDocker Composeで使用されるPostgreSQLのDockerfileと、データベースを初期化するスクリプトも作成します。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-5.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;img src=&#34;/docs/images/developers/docker-6.png&#34; alt=&#34;drawing&#34; style=&#34;width:800px;&#34;/&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: DockerComposeを使用したネットワークブートストラップする</title>
      <link>/docs/corda-5/developers/cordapp_development/docker-bootstrap/</link>
      <pubDate>Thu, 29 Jul 2021 11:30:24 +0900</pubDate>
      
      <guid>/docs/corda-5/developers/cordapp_development/docker-bootstrap/</guid>
      <description>
        
        
        &lt;p&gt;Dockerformは、CordaノードをDockerコンテナのローカルに簡単にデプロイすることができます。&lt;/p&gt;
&lt;p&gt;これは、Cordaのgradleプラグインが提供するタスクで、Network Bootstrapperが生成したアウトプットを使って、ブートストラップされたCordaネットワークを簡単に起動するために使用できる&lt;code&gt;docker-compose.yml&lt;/code&gt;ファイルを自動的に生成します。&lt;/p&gt;
&lt;p&gt;Network Bootstrapperの公式ドキュメントは&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/network-bootstrapper.html#network-bootstrapper&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;メリット&#34;&gt;メリット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Network Bootstrapper（こちらでも説明しています）構築を簡略化できるdocker-compose.yamlを自動的に作成します。これにより手動での構築が不要になります。&lt;/li&gt;
&lt;li&gt;Cordaノードとそのデータベースの両方のデプロイメントをより適切に制御できるようになります。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.corda.net/docs/corda-enterprise/4.8/operations/deployment/deployment-kubernetes.html&#34;&gt;Kubernetes&lt;/a&gt;でも使用可能な公式&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/docker-image.html#official-corda-docker-image&#34;&gt;Dockerイメージ&lt;/a&gt;の使用方法を理解することができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ウォークスルー事例&#34;&gt;ウォークスルー事例&lt;/h2&gt;
&lt;p&gt;ドキュメントには、Dockerformがどのように機能するかが非常によく説明されています。ここでは、R3のGitHubにあるCorDappのサンプルを見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/corda/samples-kotlin/tree/master/Features/dockerform-yocordapp&#34;&gt;https://github.com/corda/samples-kotlin/tree/master/Features/dockerform-yocordapp&lt;/a&gt; .&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;Dockerformについてのドキュメントは&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/generating-a-node.html#use-cordform-and-dockerform-to-create-a-set-of-local-nodes-automatically&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;buildgradleの新しいタスク&#34;&gt;build.gradleの新しいタスク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;外部からSSHでDockerコンテナに接続するために必要な &amp;ldquo;sshdPort &amp;ldquo;を追加します
&lt;ul&gt;
&lt;li&gt;ノードに使用する公式Corda Docker Imageを宣言します&lt;/li&gt;
&lt;li&gt;外部からSSHでDockerコンテナに接続するために必要な &amp;ldquo;sshdPort &amp;ldquo;を追加します&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/docs/images/developers/docker-1.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;h3 id=&#34;preparedockernodes-タスクを実行する&#34;&gt;prepareDockerNodes &amp;ldquo;タスクを実行する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;./gradlew prepareDockerNodes&lt;/code&gt;を実行すると、&lt;code&gt;/build/nodes&lt;/code&gt;フォルダ内に以下のようなアウトプットが作成されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt;は、&lt;code&gt;prepareDockerNodes&lt;/code&gt;タスクから取得した情報で自動的に生成されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/docs/images/developers/docker-2.png&#34; alt=&#34;drawing&#34; style=&#34;width:300px;&#34;/&gt;
&lt;p&gt;以下は、&lt;code&gt;docker-compose.yaml&lt;/code&gt;の内容です。Dockerのすべてのボリュームが、&lt;code&gt;build/nodes&lt;/code&gt;内に生成されたフォルダに関連付けられています。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-3.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;h3 id=&#34;外部データベースを追加する&#34;&gt;外部データベースを追加する&lt;/h3&gt;
&lt;p&gt;上記の例ではH2データベースを使用していますが、他のデータベースを追加することも可能です。DockerformがDockerコンテナの作成を行います。PostgreSQLを使った例を見てみましょう。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;こちらの内容は、&lt;a href=&#34;https://www.notion.so/JP-Docker-Compose-Corda-Dockerform-8fd2801bee984865ba2822ee018ad6d4#4c0677cf98d84e9d8bb8274c63c28d96&#34;&gt;こちら&lt;/a&gt;のドキュメントにも記載されています。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;ドキュメントに記載されている手順が完了したら、&lt;code&gt;./gradlew prepareDockerNodes&lt;/code&gt;を実行します。ここでは、出力と&lt;code&gt;docker-compose.yaml&lt;/code&gt; が更新されます。PostgreSQLのパラメータを設定した新しいサービスである&lt;code&gt;notary-db&lt;/code&gt;があります。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-4.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;p&gt;また、Dockerformは上記のDocker Composeで使用されるPostgreSQLのDockerfileと、データベースを初期化するスクリプトも作成します。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-5.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;img src=&#34;/docs/images/developers/docker-6.png&#34; alt=&#34;drawing&#34; style=&#34;width:800px;&#34;/&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: DockerComposeを使用したネットワークブートストラップする</title>
      <link>/docs/developers/cordapp_development/docker-bootstrap/</link>
      <pubDate>Thu, 29 Jul 2021 11:30:24 +0900</pubDate>
      
      <guid>/docs/developers/cordapp_development/docker-bootstrap/</guid>
      <description>
        
        
        &lt;p&gt;Dockerformは、CordaノードをDockerコンテナのローカルに簡単にデプロイすることができます。&lt;/p&gt;
&lt;p&gt;これは、Cordaのgradleプラグインが提供するタスクで、Network Bootstrapperが生成したアウトプットを使って、ブートストラップされたCordaネットワークを簡単に起動するために使用できる&lt;code&gt;docker-compose.yml&lt;/code&gt;ファイルを自動的に生成します。&lt;/p&gt;
&lt;p&gt;Network Bootstrapperの公式ドキュメントは&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/network-bootstrapper.html#network-bootstrapper&#34;&gt;こちら&lt;/a&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;メリット&#34;&gt;メリット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Network Bootstrapper（こちらでも説明しています）構築を簡略化できるdocker-compose.yamlを自動的に作成します。これにより手動での構築が不要になります。&lt;/li&gt;
&lt;li&gt;Cordaノードとそのデータベースの両方のデプロイメントをより適切に制御できるようになります。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.corda.net/docs/corda-enterprise/4.8/operations/deployment/deployment-kubernetes.html&#34;&gt;Kubernetes&lt;/a&gt;でも使用可能な公式&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/docker-image.html#official-corda-docker-image&#34;&gt;Dockerイメージ&lt;/a&gt;の使用方法を理解することができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ウォークスルー事例&#34;&gt;ウォークスルー事例&lt;/h2&gt;
&lt;p&gt;ドキュメントには、Dockerformがどのように機能するかが非常によく説明されています。ここでは、R3のGitHubにあるCorDappのサンプルを見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/corda/samples-kotlin/tree/master/Features/dockerform-yocordapp&#34;&gt;https://github.com/corda/samples-kotlin/tree/master/Features/dockerform-yocordapp&lt;/a&gt; .&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;Dockerformについてのドキュメントは&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/generating-a-node.html#use-cordform-and-dockerform-to-create-a-set-of-local-nodes-automatically&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&#34;buildgradleの新しいタスク&#34;&gt;build.gradleの新しいタスク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;外部からSSHでDockerコンテナに接続するために必要な &amp;ldquo;sshdPort &amp;ldquo;を追加します
&lt;ul&gt;
&lt;li&gt;ノードに使用する公式Corda Docker Imageを宣言します&lt;/li&gt;
&lt;li&gt;外部からSSHでDockerコンテナに接続するために必要な &amp;ldquo;sshdPort &amp;ldquo;を追加します&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/docs/images/developers/docker-1.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;h3 id=&#34;preparedockernodes-タスクを実行する&#34;&gt;prepareDockerNodes &amp;ldquo;タスクを実行する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;./gradlew prepareDockerNodes&lt;/code&gt;を実行すると、&lt;code&gt;/build/nodes&lt;/code&gt;フォルダ内に以下のようなアウトプットが作成されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt;は、&lt;code&gt;prepareDockerNodes&lt;/code&gt;タスクから取得した情報で自動的に生成されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;/docs/images/developers/docker-2.png&#34; alt=&#34;drawing&#34; style=&#34;width:300px;&#34;/&gt;
&lt;p&gt;以下は、&lt;code&gt;docker-compose.yaml&lt;/code&gt;の内容です。Dockerのすべてのボリュームが、&lt;code&gt;build/nodes&lt;/code&gt;内に生成されたフォルダに関連付けられています。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-3.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;h3 id=&#34;外部データベースを追加する&#34;&gt;外部データベースを追加する&lt;/h3&gt;
&lt;p&gt;上記の例ではH2データベースを使用していますが、他のデータベースを追加することも可能です。DockerformがDockerコンテナの作成を行います。PostgreSQLを使った例を見てみましょう。&lt;/p&gt;


&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;こちらの内容は、&lt;a href=&#34;https://www.notion.so/JP-Docker-Compose-Corda-Dockerform-8fd2801bee984865ba2822ee018ad6d4#4c0677cf98d84e9d8bb8274c63c28d96&#34;&gt;こちら&lt;/a&gt;のドキュメントにも記載されています。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;ドキュメントに記載されている手順が完了したら、&lt;code&gt;./gradlew prepareDockerNodes&lt;/code&gt;を実行します。ここでは、出力と&lt;code&gt;docker-compose.yaml&lt;/code&gt; が更新されます。PostgreSQLのパラメータを設定した新しいサービスである&lt;code&gt;notary-db&lt;/code&gt;があります。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-4.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;p&gt;また、Dockerformは上記のDocker Composeで使用されるPostgreSQLのDockerfileと、データベースを初期化するスクリプトも作成します。&lt;/p&gt;
&lt;img src=&#34;/docs/images/developers/docker-5.png&#34; alt=&#34;drawing&#34; style=&#34;width:600px;&#34;/&gt;
&lt;img src=&#34;/docs/images/developers/docker-6.png&#34; alt=&#34;drawing&#34; style=&#34;width:800px;&#34;/&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Signature Constraint</title>
      <link>/docs/corda-4/developers/cordapp_development/signature-constraint/</link>
      <pubDate>Wed, 28 Jul 2021 17:02:56 +0900</pubDate>
      
      <guid>/docs/corda-4/developers/cordapp_development/signature-constraint/</guid>
      <description>
        
        
        &lt;p&gt;CorDappの開発において、アップグレードは避けられません。CorDappのライフサイクルの間に、バグフィックスやビジネス要件の変更によるアップデートがないことはほとんどありません。アップグレードは小さなものもあれば、大規模な計画を必要とする複雑な変更の場合もあります。いずれにしても、これは見過ごせないテーマです。&lt;/p&gt;
&lt;p&gt;読み進める前に、この記事はステート、フロー、コントラクトなどの&lt;a href=&#34;https://training.corda.net/key-concepts/concepts/&#34;&gt;Cordaの主要な概念&lt;/a&gt;を基本的に理解していることを前提としています。これらを理解していなければ、この記事の残りの部分はあまり意味をなさないので、まずはそれらに慣れることをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;explicitおよびimplicitなcontractのアップグレード&#34;&gt;ExplicitおよびImplicitなContractのアップグレード&lt;/h2&gt;
&lt;p&gt;Cordaでは、アップグレードを管理する方法が2つあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explicit(明示的)&lt;/strong&gt;: すべてのノードで同じバージョンのコントラクトを持つCorDappsを動作させる必要があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implicit(暗黙的)&lt;/strong&gt;: それぞれのノードが異なるタイミングでアップグレードできるようにすることで&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Explicit(明示的)&lt;/strong&gt; なアップグレードのコンセプトはとても簡単です。基本的にアップグレードが必要なときは、すべてのノードがそれを行う必要があります。Explicitアップグレードの欠点は、すべてのノードが、アップグレードされるコントラクトに属する元帳の既存の状態をすべて更新する必要があることです。これは重い処理になります。また、Cordaのような分散型台帳システムでは、すべてのノードに同時にアップグレードを要求することができない場合もあります。&lt;/p&gt;
&lt;p&gt;一方、&lt;strong&gt;Implicit(暗黙的)&lt;/strong&gt; のアップグレードでは、CorDappの異なるバージョンのノードが相互に取引を行うことができます。例えば、ノードAとノードBの両方がCorDappのバージョン1で動作していたとします。新しいバージョン（バージョン2）がリリースされ、ノードAはアップグレードし、ノードBはバージョン1のままだったとします。この時点で、ノードBは、トランザクション内のコントラクト・アタッチメントがトランザクションで使用される制約を満たす限り、ノードAとの間でトランザクションを開始することができます。このアプローチでは、ネットワークやノードの管理者がアップグレードの計画を立てる際に、より柔軟に対応することができます。&lt;/p&gt;
&lt;p&gt;これを実現するためには、ノードがトランザクションで提示されたコントラクトが信頼できるかどうかをどのように判断するかが重要な問題となります。&lt;/p&gt;
&lt;h2 id=&#34;contract-constraint&#34;&gt;Contract Constraint&lt;/h2&gt;
&lt;p&gt;Contract constraintは、着信したトランザクションのcontractが受け入れられるかどうかを決定するアプローチとみなすことができます。&lt;/p&gt;
&lt;p&gt;Cordaでは、いくつかのタイプのconstraintがサポートされています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hash constraint&lt;/strong&gt;: この状態で使用できるアプリのバージョンは1つだけです。これにより、元のバージョンで作成されたStateを利用しながら、将来的にアプリがアップグレードされることを防ぎます。これは、explicit upgradeに使用されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility zone whitelisted (or CZ whitelisted) constraint&lt;/strong&gt;: 互換性ゾーン演算子は、コントラクトクラス名で使用可能なバージョンのハッシュをリストアップします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signature constraint&lt;/strong&gt;: 特定の鍵で署名されたどのバージョンのアプリでも使用できます。Corda 4以降のバージョンでは、アプリが署名されている場合、この方法がデフォルトで使用されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always accept constraint&lt;/strong&gt;: どのバージョンのアプリでも使用できます。これは安全ではありませんが、テストには便利です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cordaの公式ドキュメントによると、&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/api-contract-constraints.html#signature-constraints&#34;&gt;Hash constraintとCompatibility zone whitelisted constraintは、Signature constraintが実装される前の初期のCordaバージョンの名残です。&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;signature-constraintを使ったアップグレード&#34;&gt;Signature Constraintを使ったアップグレード&lt;/h2&gt;
&lt;h3 id=&#34;contract-アップグレード&#34;&gt;Contract アップグレード&lt;/h3&gt;
&lt;p&gt;Corda 4では、CorDappが署名されている場合、デフォルトでSignature constraint が使用されます。キーは、&lt;a href=&#34;https://docs.corda.net/docs/corda-enterprise/4.8/api-core-types.html#compositekey&#34;&gt;CompositeKey&lt;/a&gt;またはシンプルなPublicKeyのいずれかです。着信トランザクションを処理する際、ノードはその中のcontract attachmentが、そのSignature constraintで指定された正しい署名者を持っているかどうかを確認します。&lt;/p&gt;
&lt;p&gt;ノードが信頼していないcontract attachmentを使用するトランザクションを受信したが、同じコントラクトクラスと同じ署名を持つアタッチメントがノード上に存在する場合、ノードはそのcontractのコードを信頼しているかのように実行します。つまり、ノードは古いバージョンのCorDappを実行しているトランザクションを検証するために、すべてのバージョンのCorDappをアップロードする必要はなくなりました。代わりに、CorDappコントラクトの任意のバージョンがインストールされていれば十分です。&lt;/p&gt;
&lt;p&gt;output stateを追加する際には、&lt;code&gt;TransactionBuilder&lt;/code&gt;が適切な制約とattachmentを選択してくれます。そのため、ほとんどの場合、コード内で使用する制約の種類を指定することを気にする必要はありません。&lt;/p&gt;
&lt;p&gt;CorDappのアップグレードとは、基本的にCorDappを新しいバージョンのJARファイルで置き換えることを意味します。また、新しいバージョンがstateの既存の状態と互換性があるかどうかを確認するために、様々なことに注意する必要があります。例えば、あるstateに新しいフィールドが導入された場合、そのフィールドを&lt;code&gt;Nullable&lt;/code&gt;にすることで、古いバージョンのアプリで生成されたstateをデシリアライズする際に問題が発生しないようにします。&lt;/p&gt;
&lt;p&gt;ここでは、Kotlinでの例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;フローアップグレード&#34;&gt;フローアップグレード&lt;/h2&gt;
&lt;p&gt;フローのアップグレードでは、異なるバージョンで動作しているノード間のトランザクションをどのように処理するかは、CorDapp 開発者がコントロールします。&lt;/p&gt;
&lt;p&gt;フローのアップグレードの際に考慮すべき主な点は、フローのバージョニングです。@&lt;code&gt;InitiatingFlow&lt;/code&gt;アノテーションには、デフォルトで1となるバージョンプロパティが用意されています。このプロパティが重要なのは、相手がどのバージョンのフローを実行しているかを判断するのに役立ち、それに応じて正しいビジネスロジックが実行されるようにフローを実装できるからです。&lt;/p&gt;
&lt;p&gt;下記は、フローのバージョン番号を指定する例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;下記は、カウンターパーティのフローバージョンを取得する例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;backward-compatibility後方互換性&#34;&gt;Backward-compatibility（後方互換性）&lt;/h2&gt;
&lt;p&gt;CorDappの構造は、2つの独立したモジュールに分割することが推奨されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contracts.jarには、ステートとコントラクトロジックが格納されています。&lt;/li&gt;
&lt;li&gt;workflow.jarにはフロー、サービス、その他のサポートライブラリが格納されています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;contracts.jarはトランザクションに添付され、ネットワーク内のノード間で送信されますが、その中のコードはノードがトランザクションを検証するために必要なデータ構造とスマートコントラクトロジックを定義しているからです。CorDappのすべてが1つのモジュールに入っていると、フローのコードは使われていないにもかかわらず、一緒に流されてしまいます。&lt;/p&gt;
&lt;p&gt;アップグレードは、コントラクトとワークフローの両方のモジュールの変更を伴うとは限りません。フローのビジネスロジックを変更する必要があるためにアップグレードが起こる場合もあれば、スマートコントラクトのコードを更新する必要がある場合もあります。コントラクトとワークフローの両方が変更される場合は、新バージョンのフローが旧バージョンのフローや旧バージョンのコントラクトと後方互換性があるかどうかを確認することが重要です。&lt;/p&gt;
&lt;h2 id=&#34;hash-contractからsignature-contractへの移行&#34;&gt;Hash contractからSignature contractへの移行&lt;/h2&gt;
&lt;p&gt;これまでの議論では、すべてのステートが同じタイプの制約によって作成されるという前提で話を進めてきました。しかし、現在Hash contractを使用していて、今後Signature contractに変更しようとしている場合、元帳上の既存の状態をSignature contractを使用するように移行する必要があります。&lt;/p&gt;
&lt;p&gt;この記事の範囲外ですが、このトピックに関するいくつかのリソースがありますので、参考にしてみてください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/corda/unconstraint-signature-constraint-migration-e95a66789eab&#34;&gt;Unconstraint Signature Constraint Migration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snedamle/corda_advanced_bootcamps/tree/master/contract-constraint-migration&#34;&gt;contract-constraint-migration in Corda Advanced Bootcamps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Signature Constraint</title>
      <link>/docs/corda-5/developers/cordapp_development/signature-constraint/</link>
      <pubDate>Wed, 28 Jul 2021 17:02:56 +0900</pubDate>
      
      <guid>/docs/corda-5/developers/cordapp_development/signature-constraint/</guid>
      <description>
        
        
        &lt;p&gt;CorDappの開発において、アップグレードは避けられません。CorDappのライフサイクルの間に、バグフィックスやビジネス要件の変更によるアップデートがないことはほとんどありません。アップグレードは小さなものもあれば、大規模な計画を必要とする複雑な変更の場合もあります。いずれにしても、これは見過ごせないテーマです。&lt;/p&gt;
&lt;p&gt;読み進める前に、この記事はステート、フロー、コントラクトなどの&lt;a href=&#34;https://training.corda.net/key-concepts/concepts/&#34;&gt;Cordaの主要な概念&lt;/a&gt;を基本的に理解していることを前提としています。これらを理解していなければ、この記事の残りの部分はあまり意味をなさないので、まずはそれらに慣れることをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;explicitおよびimplicitなcontractのアップグレード&#34;&gt;ExplicitおよびImplicitなContractのアップグレード&lt;/h2&gt;
&lt;p&gt;Cordaでは、アップグレードを管理する方法が2つあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explicit(明示的)&lt;/strong&gt;: すべてのノードで同じバージョンのコントラクトを持つCorDappsを動作させる必要があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implicit(暗黙的)&lt;/strong&gt;: それぞれのノードが異なるタイミングでアップグレードできるようにすることで&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Explicit(明示的)&lt;/strong&gt; なアップグレードのコンセプトはとても簡単です。基本的にアップグレードが必要なときは、すべてのノードがそれを行う必要があります。Explicitアップグレードの欠点は、すべてのノードが、アップグレードされるコントラクトに属する元帳の既存の状態をすべて更新する必要があることです。これは重い処理になります。また、Cordaのような分散型台帳システムでは、すべてのノードに同時にアップグレードを要求することができない場合もあります。&lt;/p&gt;
&lt;p&gt;一方、&lt;strong&gt;Implicit(暗黙的)&lt;/strong&gt; のアップグレードでは、CorDappの異なるバージョンのノードが相互に取引を行うことができます。例えば、ノードAとノードBの両方がCorDappのバージョン1で動作していたとします。新しいバージョン（バージョン2）がリリースされ、ノードAはアップグレードし、ノードBはバージョン1のままだったとします。この時点で、ノードBは、トランザクション内のコントラクト・アタッチメントがトランザクションで使用される制約を満たす限り、ノードAとの間でトランザクションを開始することができます。このアプローチでは、ネットワークやノードの管理者がアップグレードの計画を立てる際に、より柔軟に対応することができます。&lt;/p&gt;
&lt;p&gt;これを実現するためには、ノードがトランザクションで提示されたコントラクトが信頼できるかどうかをどのように判断するかが重要な問題となります。&lt;/p&gt;
&lt;h2 id=&#34;contract-constraint&#34;&gt;Contract Constraint&lt;/h2&gt;
&lt;p&gt;Contract constraintは、着信したトランザクションのcontractが受け入れられるかどうかを決定するアプローチとみなすことができます。&lt;/p&gt;
&lt;p&gt;Cordaでは、いくつかのタイプのconstraintがサポートされています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hash constraint&lt;/strong&gt;: この状態で使用できるアプリのバージョンは1つだけです。これにより、元のバージョンで作成されたStateを利用しながら、将来的にアプリがアップグレードされることを防ぎます。これは、explicit upgradeに使用されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility zone whitelisted (or CZ whitelisted) constraint&lt;/strong&gt;: 互換性ゾーン演算子は、コントラクトクラス名で使用可能なバージョンのハッシュをリストアップします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signature constraint&lt;/strong&gt;: 特定の鍵で署名されたどのバージョンのアプリでも使用できます。Corda 4以降のバージョンでは、アプリが署名されている場合、この方法がデフォルトで使用されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always accept constraint&lt;/strong&gt;: どのバージョンのアプリでも使用できます。これは安全ではありませんが、テストには便利です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cordaの公式ドキュメントによると、&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/api-contract-constraints.html#signature-constraints&#34;&gt;Hash constraintとCompatibility zone whitelisted constraintは、Signature constraintが実装される前の初期のCordaバージョンの名残です。&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;signature-constraintを使ったアップグレード&#34;&gt;Signature Constraintを使ったアップグレード&lt;/h2&gt;
&lt;h3 id=&#34;contract-アップグレード&#34;&gt;Contract アップグレード&lt;/h3&gt;
&lt;p&gt;Corda 4では、CorDappが署名されている場合、デフォルトでSignature constraint が使用されます。キーは、&lt;a href=&#34;https://docs.corda.net/docs/corda-enterprise/4.8/api-core-types.html#compositekey&#34;&gt;CompositeKey&lt;/a&gt;またはシンプルなPublicKeyのいずれかです。着信トランザクションを処理する際、ノードはその中のcontract attachmentが、そのSignature constraintで指定された正しい署名者を持っているかどうかを確認します。&lt;/p&gt;
&lt;p&gt;ノードが信頼していないcontract attachmentを使用するトランザクションを受信したが、同じコントラクトクラスと同じ署名を持つアタッチメントがノード上に存在する場合、ノードはそのcontractのコードを信頼しているかのように実行します。つまり、ノードは古いバージョンのCorDappを実行しているトランザクションを検証するために、すべてのバージョンのCorDappをアップロードする必要はなくなりました。代わりに、CorDappコントラクトの任意のバージョンがインストールされていれば十分です。&lt;/p&gt;
&lt;p&gt;output stateを追加する際には、&lt;code&gt;TransactionBuilder&lt;/code&gt;が適切な制約とattachmentを選択してくれます。そのため、ほとんどの場合、コード内で使用する制約の種類を指定することを気にする必要はありません。&lt;/p&gt;
&lt;p&gt;CorDappのアップグレードとは、基本的にCorDappを新しいバージョンのJARファイルで置き換えることを意味します。また、新しいバージョンがstateの既存の状態と互換性があるかどうかを確認するために、様々なことに注意する必要があります。例えば、あるstateに新しいフィールドが導入された場合、そのフィールドを&lt;code&gt;Nullable&lt;/code&gt;にすることで、古いバージョンのアプリで生成されたstateをデシリアライズする際に問題が発生しないようにします。&lt;/p&gt;
&lt;p&gt;ここでは、Kotlinでの例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;フローアップグレード&#34;&gt;フローアップグレード&lt;/h2&gt;
&lt;p&gt;フローのアップグレードでは、異なるバージョンで動作しているノード間のトランザクションをどのように処理するかは、CorDapp 開発者がコントロールします。&lt;/p&gt;
&lt;p&gt;フローのアップグレードの際に考慮すべき主な点は、フローのバージョニングです。@&lt;code&gt;InitiatingFlow&lt;/code&gt;アノテーションには、デフォルトで1となるバージョンプロパティが用意されています。このプロパティが重要なのは、相手がどのバージョンのフローを実行しているかを判断するのに役立ち、それに応じて正しいビジネスロジックが実行されるようにフローを実装できるからです。&lt;/p&gt;
&lt;p&gt;下記は、フローのバージョン番号を指定する例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;下記は、カウンターパーティのフローバージョンを取得する例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;backward-compatibility後方互換性&#34;&gt;Backward-compatibility（後方互換性）&lt;/h2&gt;
&lt;p&gt;CorDappの構造は、2つの独立したモジュールに分割することが推奨されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contracts.jarには、ステートとコントラクトロジックが格納されています。&lt;/li&gt;
&lt;li&gt;workflow.jarにはフロー、サービス、その他のサポートライブラリが格納されています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;contracts.jarはトランザクションに添付され、ネットワーク内のノード間で送信されますが、その中のコードはノードがトランザクションを検証するために必要なデータ構造とスマートコントラクトロジックを定義しているからです。CorDappのすべてが1つのモジュールに入っていると、フローのコードは使われていないにもかかわらず、一緒に流されてしまいます。&lt;/p&gt;
&lt;p&gt;アップグレードは、コントラクトとワークフローの両方のモジュールの変更を伴うとは限りません。フローのビジネスロジックを変更する必要があるためにアップグレードが起こる場合もあれば、スマートコントラクトのコードを更新する必要がある場合もあります。コントラクトとワークフローの両方が変更される場合は、新バージョンのフローが旧バージョンのフローや旧バージョンのコントラクトと後方互換性があるかどうかを確認することが重要です。&lt;/p&gt;
&lt;h2 id=&#34;hash-contractからsignature-contractへの移行&#34;&gt;Hash contractからSignature contractへの移行&lt;/h2&gt;
&lt;p&gt;これまでの議論では、すべてのステートが同じタイプの制約によって作成されるという前提で話を進めてきました。しかし、現在Hash contractを使用していて、今後Signature contractに変更しようとしている場合、元帳上の既存の状態をSignature contractを使用するように移行する必要があります。&lt;/p&gt;
&lt;p&gt;この記事の範囲外ですが、このトピックに関するいくつかのリソースがありますので、参考にしてみてください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/corda/unconstraint-signature-constraint-migration-e95a66789eab&#34;&gt;Unconstraint Signature Constraint Migration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snedamle/corda_advanced_bootcamps/tree/master/contract-constraint-migration&#34;&gt;contract-constraint-migration in Corda Advanced Bootcamps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Signature Constraint</title>
      <link>/docs/developers/cordapp_development/signature-constraint/</link>
      <pubDate>Wed, 28 Jul 2021 17:02:56 +0900</pubDate>
      
      <guid>/docs/developers/cordapp_development/signature-constraint/</guid>
      <description>
        
        
        &lt;p&gt;CorDappの開発において、アップグレードは避けられません。CorDappのライフサイクルの間に、バグフィックスやビジネス要件の変更によるアップデートがないことはほとんどありません。アップグレードは小さなものもあれば、大規模な計画を必要とする複雑な変更の場合もあります。いずれにしても、これは見過ごせないテーマです。&lt;/p&gt;
&lt;p&gt;読み進める前に、この記事はステート、フロー、コントラクトなどの&lt;a href=&#34;https://training.corda.net/key-concepts/concepts/&#34;&gt;Cordaの主要な概念&lt;/a&gt;を基本的に理解していることを前提としています。これらを理解していなければ、この記事の残りの部分はあまり意味をなさないので、まずはそれらに慣れることをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;explicitおよびimplicitなcontractのアップグレード&#34;&gt;ExplicitおよびImplicitなContractのアップグレード&lt;/h2&gt;
&lt;p&gt;Cordaでは、アップグレードを管理する方法が2つあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Explicit(明示的)&lt;/strong&gt;: すべてのノードで同じバージョンのコントラクトを持つCorDappsを動作させる必要があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implicit(暗黙的)&lt;/strong&gt;: それぞれのノードが異なるタイミングでアップグレードできるようにすることで&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Explicit(明示的)&lt;/strong&gt; なアップグレードのコンセプトはとても簡単です。基本的にアップグレードが必要なときは、すべてのノードがそれを行う必要があります。Explicitアップグレードの欠点は、すべてのノードが、アップグレードされるコントラクトに属する元帳の既存の状態をすべて更新する必要があることです。これは重い処理になります。また、Cordaのような分散型台帳システムでは、すべてのノードに同時にアップグレードを要求することができない場合もあります。&lt;/p&gt;
&lt;p&gt;一方、&lt;strong&gt;Implicit(暗黙的)&lt;/strong&gt; のアップグレードでは、CorDappの異なるバージョンのノードが相互に取引を行うことができます。例えば、ノードAとノードBの両方がCorDappのバージョン1で動作していたとします。新しいバージョン（バージョン2）がリリースされ、ノードAはアップグレードし、ノードBはバージョン1のままだったとします。この時点で、ノードBは、トランザクション内のコントラクト・アタッチメントがトランザクションで使用される制約を満たす限り、ノードAとの間でトランザクションを開始することができます。このアプローチでは、ネットワークやノードの管理者がアップグレードの計画を立てる際に、より柔軟に対応することができます。&lt;/p&gt;
&lt;p&gt;これを実現するためには、ノードがトランザクションで提示されたコントラクトが信頼できるかどうかをどのように判断するかが重要な問題となります。&lt;/p&gt;
&lt;h2 id=&#34;contract-constraint&#34;&gt;Contract Constraint&lt;/h2&gt;
&lt;p&gt;Contract constraintは、着信したトランザクションのcontractが受け入れられるかどうかを決定するアプローチとみなすことができます。&lt;/p&gt;
&lt;p&gt;Cordaでは、いくつかのタイプのconstraintがサポートされています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hash constraint&lt;/strong&gt;: この状態で使用できるアプリのバージョンは1つだけです。これにより、元のバージョンで作成されたStateを利用しながら、将来的にアプリがアップグレードされることを防ぎます。これは、explicit upgradeに使用されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility zone whitelisted (or CZ whitelisted) constraint&lt;/strong&gt;: 互換性ゾーン演算子は、コントラクトクラス名で使用可能なバージョンのハッシュをリストアップします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signature constraint&lt;/strong&gt;: 特定の鍵で署名されたどのバージョンのアプリでも使用できます。Corda 4以降のバージョンでは、アプリが署名されている場合、この方法がデフォルトで使用されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always accept constraint&lt;/strong&gt;: どのバージョンのアプリでも使用できます。これは安全ではありませんが、テストには便利です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cordaの公式ドキュメントによると、&lt;a href=&#34;https://docs.corda.net/docs/corda-os/4.8/api-contract-constraints.html#signature-constraints&#34;&gt;Hash constraintとCompatibility zone whitelisted constraintは、Signature constraintが実装される前の初期のCordaバージョンの名残です。&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;signature-constraintを使ったアップグレード&#34;&gt;Signature Constraintを使ったアップグレード&lt;/h2&gt;
&lt;h3 id=&#34;contract-アップグレード&#34;&gt;Contract アップグレード&lt;/h3&gt;
&lt;p&gt;Corda 4では、CorDappが署名されている場合、デフォルトでSignature constraint が使用されます。キーは、&lt;a href=&#34;https://docs.corda.net/docs/corda-enterprise/4.8/api-core-types.html#compositekey&#34;&gt;CompositeKey&lt;/a&gt;またはシンプルなPublicKeyのいずれかです。着信トランザクションを処理する際、ノードはその中のcontract attachmentが、そのSignature constraintで指定された正しい署名者を持っているかどうかを確認します。&lt;/p&gt;
&lt;p&gt;ノードが信頼していないcontract attachmentを使用するトランザクションを受信したが、同じコントラクトクラスと同じ署名を持つアタッチメントがノード上に存在する場合、ノードはそのcontractのコードを信頼しているかのように実行します。つまり、ノードは古いバージョンのCorDappを実行しているトランザクションを検証するために、すべてのバージョンのCorDappをアップロードする必要はなくなりました。代わりに、CorDappコントラクトの任意のバージョンがインストールされていれば十分です。&lt;/p&gt;
&lt;p&gt;output stateを追加する際には、&lt;code&gt;TransactionBuilder&lt;/code&gt;が適切な制約とattachmentを選択してくれます。そのため、ほとんどの場合、コード内で使用する制約の種類を指定することを気にする必要はありません。&lt;/p&gt;
&lt;p&gt;CorDappのアップグレードとは、基本的にCorDappを新しいバージョンのJARファイルで置き換えることを意味します。また、新しいバージョンがstateの既存の状態と互換性があるかどうかを確認するために、様々なことに注意する必要があります。例えば、あるstateに新しいフィールドが導入された場合、そのフィールドを&lt;code&gt;Nullable&lt;/code&gt;にすることで、古いバージョンのアプリで生成されたstateをデシリアライズする際に問題が発生しないようにします。&lt;/p&gt;
&lt;p&gt;ここでは、Kotlinでの例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;フローアップグレード&#34;&gt;フローアップグレード&lt;/h2&gt;
&lt;p&gt;フローのアップグレードでは、異なるバージョンで動作しているノード間のトランザクションをどのように処理するかは、CorDapp 開発者がコントロールします。&lt;/p&gt;
&lt;p&gt;フローのアップグレードの際に考慮すべき主な点は、フローのバージョニングです。@&lt;code&gt;InitiatingFlow&lt;/code&gt;アノテーションには、デフォルトで1となるバージョンプロパティが用意されています。このプロパティが重要なのは、相手がどのバージョンのフローを実行しているかを判断するのに役立ち、それに応じて正しいビジネスロジックが実行されるようにフローを実装できるからです。&lt;/p&gt;
&lt;p&gt;下記は、フローのバージョン番号を指定する例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;下記は、カウンターパーティのフローバージョンを取得する例です：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/docs/images/developers/kotlin-sample3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;backward-compatibility後方互換性&#34;&gt;Backward-compatibility（後方互換性）&lt;/h2&gt;
&lt;p&gt;CorDappの構造は、2つの独立したモジュールに分割することが推奨されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contracts.jarには、ステートとコントラクトロジックが格納されています。&lt;/li&gt;
&lt;li&gt;workflow.jarにはフロー、サービス、その他のサポートライブラリが格納されています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;contracts.jarはトランザクションに添付され、ネットワーク内のノード間で送信されますが、その中のコードはノードがトランザクションを検証するために必要なデータ構造とスマートコントラクトロジックを定義しているからです。CorDappのすべてが1つのモジュールに入っていると、フローのコードは使われていないにもかかわらず、一緒に流されてしまいます。&lt;/p&gt;
&lt;p&gt;アップグレードは、コントラクトとワークフローの両方のモジュールの変更を伴うとは限りません。フローのビジネスロジックを変更する必要があるためにアップグレードが起こる場合もあれば、スマートコントラクトのコードを更新する必要がある場合もあります。コントラクトとワークフローの両方が変更される場合は、新バージョンのフローが旧バージョンのフローや旧バージョンのコントラクトと後方互換性があるかどうかを確認することが重要です。&lt;/p&gt;
&lt;h2 id=&#34;hash-contractからsignature-contractへの移行&#34;&gt;Hash contractからSignature contractへの移行&lt;/h2&gt;
&lt;p&gt;これまでの議論では、すべてのステートが同じタイプの制約によって作成されるという前提で話を進めてきました。しかし、現在Hash contractを使用していて、今後Signature contractに変更しようとしている場合、元帳上の既存の状態をSignature contractを使用するように移行する必要があります。&lt;/p&gt;
&lt;p&gt;この記事の範囲外ですが、このトピックに関するいくつかのリソースがありますので、参考にしてみてください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/corda/unconstraint-signature-constraint-migration-e95a66789eab&#34;&gt;Unconstraint Signature Constraint Migration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/snedamle/corda_advanced_bootcamps/tree/master/contract-constraint-migration&#34;&gt;contract-constraint-migration in Corda Advanced Bootcamps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Corda 4.6 Introduction</title>
      <link>/docs/understanding_corda/general_concepts/corda4.6-introduction/</link>
      <pubDate>Sun, 11 Jul 2021 19:37:43 +0900</pubDate>
      
      <guid>/docs/understanding_corda/general_concepts/corda4.6-introduction/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;こちらの記事はR3社のテックリードであるMike Wardによる記事の抄訳です。詳細については元記事をご覧ください。
R3社から、Corda4.6がもうすぐリリースされます。今回のリリースは、次の3つの領域に重点を置いています。&lt;/p&gt;
&lt;p&gt;Flow管理
メンバーシップとネットワークの改善
開発者向けの改善&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;flow管理&#34;&gt;Flow管理&lt;/h2&gt;
&lt;p&gt;Cordaは、企業をまたいでワークフローを実現するFlowという機能を備えています。これらのワークフローの管理は困難な場合が多いです。今回のリリースでは，実行中のFlowの管理方法を改善しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シェル/ RPCを介してFlowCheckpointを検索および検査する機能が追加されました。本番で長い時間使われるようになった結果、実行中のFlowを管理するツールが必要になりました。この機能を使用すると、Flowの開始時間、到達したステップ、渡されたパラメーターなど、実行中のFlowに関する豊富な情報をリモートで取得して、実行を管理することができます。これは、以前の「FlowHospital」を拡張しています。ユーザーはCorDappなどのいくつかのフィルター基準からFlowを照会し、進行状況等や各種の情報を取得できます。&lt;/li&gt;
&lt;li&gt;Nodeを再起動せずにFlowを再試行できるようになりました。ノードオペレーターは、再試行をトリガーするためにノードを再起動する必要がなく、RPCを介してHospitalized Flowを再試行できるようになりました。さらに、ノードオペレーターは、問題のあるFlowを「再起動しない」としてマークし、ノードが再起動されたときに自動的に再試行されないようにすることができます。&lt;/li&gt;
&lt;li&gt;一意のIDを使用して、フローの開始が重複しないようにすることができるようになりました。RPCクライアントがバージョンアップし、クライアントがFlowの二重呼び出しを排除できるようになりました。これにより、Flowの開始に失敗した場合にクライアントが適切なアクションを実行できるようになるため、エコシステム全体の回復力も向上します。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;メンバーシップとネットワークの改善&#34;&gt;メンバーシップとネットワークの改善&lt;/h2&gt;
&lt;p&gt;多くの実運用経験によれば、CorDappオペレーターが参加者を管理する為に多くのコストを投じていることが判明しています。プライベートネットワークでも、the Corda Networkなどのより大きなネットワークでも、オペレーターはユーザーを特定し、それらの参加者について確立したメタデータを利用してユーザーを管理する必要があります。このニーズに対応するための初期機能を実装しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;”代表”という参加者の実装。BNO（Business Network Operator)という用語がCordaにはあります。BNOとは、CorDappsをネットワーク参加者に配布し、ネットワークに参加したユーザーを管理する主体を表す用語です。この重要なエンティティがユーザーをより適切に管理できるようにすることを目指しました。手始めに，典型的にはBNOを表す「Primitive」を用意しました．今回のリリースでは、メンバーシップ認証のライフサイクルを管理するツールを紹介し、メンバーシップを管理し、資格を推進し、ビジネスネットワーク内でプライバシーとアクセス許可をきめ細かく設定するためのベストプラクティスを紹介します。&lt;/li&gt;
&lt;li&gt;大規模ネットワークのサポート強化。ネットワークマップリストの配信パフォーマンスを向上させ、ネットワークが数千のノードを含む場合のターンアラウンドタイムを高速化しました。&lt;/li&gt;
&lt;li&gt;Notaryを追加する際のFlag Dayの必要性の除去。新しいNotaryがネットワークのホワイトリストに追加されるたびに更新されたネットワークパラメーターを受け入れた後、Nodeをシャットダウンして再起動する必要がなくなりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;開発者向けの改善&#34;&gt;開発者向けの改善&lt;/h2&gt;
&lt;p&gt;このリリースでは、開発者がより復元力のあるアプリケーションを構築するのに役立つ多くの改善がなされました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;復元できないチェックポイントの検出。Flowはその実行中に、自動的にシリアライズされ、チェックポイントに到達するたびにデシリアライズされるようになりました。これにより、デシリアライズできないチェックポイントを作成するフローコードの自動検出が可能になります。この機能は、運用中のノード構成では無効にすることができます。（主に開発中に使用することを想定しています）&lt;/li&gt;
&lt;li&gt;カスタムシリアライザーの登録を可能にしました。FlowCheckPointの一部として型をシリアル化するときに、カスタムシリアライザーを使用できるようになりました。（もちろん、ほとんどのクラスはカスタムシリアライザーを必要としません。）チェックポイントのシリアル化中に例外をスローするクラスの為の機能です。新しいCheckpointCustomSerializerインターフェイスを実装して、カスタムチェックポイントシリアライザーを作成できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;その他の追加機能&#34;&gt;その他の追加機能&lt;/h2&gt;
&lt;p&gt;上記3つの重点的な改善に加え、以下のような機能改善がなされています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ledgerの統計データ提供。CordaのLedger（台帳）に関する統計を提供する新しいユーティリティCorDappをリリースします。&lt;/li&gt;
&lt;li&gt;トランザクションチェーンのサイズ、添付ファイルの数、およびトランザクションチェーンのすべてのOutputが消費されたかどうかを示す情報が提供するLedgerGraphというユーティリティーが提供されます。このユーティリティは、トランザクションチェーンが長すぎる場合に，オペレーターがその動作を予測し、場合によっては他の手段を検討することを可能とします。&lt;/li&gt;
&lt;li&gt;インプレースアップグレードの実現。CordaオープンソースからCordaエンタープライズに移行するお客様をよりよく支援したいと考えています。これに向けた最初のステップは、オープンソースとエンタープライズの間でスキーマが一致している事です。これにより、インスタンスの大規模な移行を必要としない、いわゆるインプレースアップグレードが可能になります。&lt;/li&gt;
&lt;li&gt;署名件数カウントツールの改善。中央のコレクターNodeからCorda Enterpriseメータリングデータを取得できるようにMetering Cordappを改善しました。Metering CorDappはスタンドアローンクライアントになりました。クライアントをそのまま使用して、ビジネスネットワークの1つ以上のNodeからJSON形式で測定データを取得できます。各Nodeのシェルに直接アクセスする必要はありません。いずれかのNodeが応答に失敗した場合、クライアントは不足しているデータを収集する後続の試行を容易にします。&lt;/li&gt;
&lt;li&gt;TLS鍵をHSMに保管できるようになりました。TLSキーは、他のCordaサーバーへの安全な接続を確保するために使用されます。これまでのリリースにもこの機能はありましたが、制限がありました。今回のリリースから、あらゆる構成において、HSMにTLSキーを保存できるようになりました。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: データのプライバシー確保</title>
      <link>/docs/corda-4/faq/technology/privacy/</link>
      <pubDate>Sun, 11 Jul 2021 17:37:38 +0900</pubDate>
      
      <guid>/docs/corda-4/faq/technology/privacy/</guid>
      <description>
        
        
        &lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;
&lt;p&gt;Cordaを使って、データのプライバシーを確保するためにはどうしたら良いでしょうか？&lt;/p&gt;
&lt;h3 id=&#34;answer&#34;&gt;Answer&lt;/h3&gt;
&lt;p&gt;Transactionデータはピアツーピアベースで共有されるため、Cordaの台帳は最適にシャーディングされ、データは必要に応じて共有／保存されます。しかし、当事者は自分が直接参加者であるTransactionを受信するだけでなく、インプットステートのすべての過去のTransactionをトレースバックし、検証を実行する必要があります。これは特定のアセット・タイプにとってはプライバシー上の課題となる可能性がありますが、以下の機能により緩和することが可能です。&lt;/p&gt;
&lt;h4 id=&#34;confidential-identities&#34;&gt;Confidential identities&lt;/h4&gt;
&lt;p&gt;公開されているアイデンティティに加えて、必要に応じてノードは自分の秘密の署名アイデンティティを自己発行することができ、これを使用してTransactionのプライバシーを保護することができます。また、保護されたプライバシーを必要に応じて解除するための組み込みFlow（IdentitySyncFlow）もあります&lt;/p&gt;
&lt;h4 id=&#34;reissuing-state&#34;&gt;Reissuing State&lt;/h4&gt;
&lt;p&gt;アセットを償還したり再発行したりすることで、Transactionチェーンのサイズを小さくすることができる他、以前のアセット所有者のプライバシーを保護することも可能です。これは必要に応じて何度でも行うことができます。&lt;/p&gt;
&lt;h4 id=&#34;transaction-tear-off&#34;&gt;Transaction Tear off&lt;/h4&gt;
&lt;p&gt;認証のために第三者（例：Oracles）にトランザクションを送信する必要がある場合があります。そのような場合において、機密性の高い要素や無関係な要素を隠したい場合がありますが、TransactionのTier offを実施することが可能です。そうすることで、特定の要素を隠さずにデータを暗号化しつつ、後で変更できないことを保証しながら、検査や署名のためにTransactionを第三者に送ることができます。&lt;/p&gt;
&lt;p&gt;さらに、以下のようなプライバシー機能を積極的に開発しています。&lt;/p&gt;
&lt;h4 id=&#34;conclave&#34;&gt;Conclave&lt;/h4&gt;
&lt;p&gt;ConclaveはR3が持つコンフィデンシャル・コンピューティングのソリューションです。セキュアなハードウェア・エンクレーブ内で契約検証を行うことで、台帳全体を効果的に暗号化することができます。すべての依存関係のある取引は、安全なハードウェア・エンクレーブの外部で暗号化されているため、当事者は過去の取引について何も知ることができません。&lt;/p&gt;
&lt;h4 id=&#34;ゼロ知識証明&#34;&gt;ゼロ知識証明&lt;/h4&gt;
&lt;p&gt;口座残高や取引金額の証明など、範囲証明のための暗号プリミティブを開発しました。&lt;/p&gt;
&lt;h4 id=&#34;membership証明の設定&#34;&gt;Membership証明の設定&lt;/h4&gt;
&lt;p&gt;特定のMembershipに属しているか否かを事前にFlow内で確認し、当該Membershipに所属を確認できない場合、Txを送信しないという形でプライバシーを確保することが可能です。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: データのプライバシー確保</title>
      <link>/docs/corda-5/faq/technology/privacy/</link>
      <pubDate>Sun, 11 Jul 2021 17:37:38 +0900</pubDate>
      
      <guid>/docs/corda-5/faq/technology/privacy/</guid>
      <description>
        
        
        &lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;
&lt;p&gt;Cordaを使って、データのプライバシーを確保するためにはどうしたら良いでしょうか？&lt;/p&gt;
&lt;h3 id=&#34;answer&#34;&gt;Answer&lt;/h3&gt;
&lt;p&gt;Transactionデータはピアツーピアベースで共有されるため、Cordaの台帳は最適にシャーディングされ、データは必要に応じて共有／保存されます。しかし、当事者は自分が直接参加者であるTransactionを受信するだけでなく、インプットステートのすべての過去のTransactionをトレースバックし、検証を実行する必要があります。これは特定のアセット・タイプにとってはプライバシー上の課題となる可能性がありますが、以下の機能により緩和することが可能です。&lt;/p&gt;
&lt;h4 id=&#34;confidential-identities&#34;&gt;Confidential identities&lt;/h4&gt;
&lt;p&gt;公開されているアイデンティティに加えて、必要に応じてノードは自分の秘密の署名アイデンティティを自己発行することができ、これを使用してTransactionのプライバシーを保護することができます。また、保護されたプライバシーを必要に応じて解除するための組み込みFlow（IdentitySyncFlow）もあります&lt;/p&gt;
&lt;h4 id=&#34;reissuing-state&#34;&gt;Reissuing State&lt;/h4&gt;
&lt;p&gt;アセットを償還したり再発行したりすることで、Transactionチェーンのサイズを小さくすることができる他、以前のアセット所有者のプライバシーを保護することも可能です。これは必要に応じて何度でも行うことができます。&lt;/p&gt;
&lt;h4 id=&#34;transaction-tear-off&#34;&gt;Transaction Tear off&lt;/h4&gt;
&lt;p&gt;認証のために第三者（例：Oracles）にトランザクションを送信する必要がある場合があります。そのような場合において、機密性の高い要素や無関係な要素を隠したい場合がありますが、TransactionのTier offを実施することが可能です。そうすることで、特定の要素を隠さずにデータを暗号化しつつ、後で変更できないことを保証しながら、検査や署名のためにTransactionを第三者に送ることができます。&lt;/p&gt;
&lt;p&gt;さらに、以下のようなプライバシー機能を積極的に開発しています。&lt;/p&gt;
&lt;h4 id=&#34;conclave&#34;&gt;Conclave&lt;/h4&gt;
&lt;p&gt;ConclaveはR3が持つコンフィデンシャル・コンピューティングのソリューションです。セキュアなハードウェア・エンクレーブ内で契約検証を行うことで、台帳全体を効果的に暗号化することができます。すべての依存関係のある取引は、安全なハードウェア・エンクレーブの外部で暗号化されているため、当事者は過去の取引について何も知ることができません。&lt;/p&gt;
&lt;h4 id=&#34;ゼロ知識証明&#34;&gt;ゼロ知識証明&lt;/h4&gt;
&lt;p&gt;口座残高や取引金額の証明など、範囲証明のための暗号プリミティブを開発しました。&lt;/p&gt;
&lt;h4 id=&#34;membership証明の設定&#34;&gt;Membership証明の設定&lt;/h4&gt;
&lt;p&gt;特定のMembershipに属しているか否かを事前にFlow内で確認し、当該Membershipに所属を確認できない場合、Txを送信しないという形でプライバシーを確保することが可能です。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: データのプライバシー確保</title>
      <link>/docs/faq/technology/privacy/</link>
      <pubDate>Sun, 11 Jul 2021 17:37:38 +0900</pubDate>
      
      <guid>/docs/faq/technology/privacy/</guid>
      <description>
        
        
        &lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;
&lt;p&gt;Cordaを使って、データのプライバシーを確保するためにはどうしたら良いでしょうか？&lt;/p&gt;
&lt;h3 id=&#34;answer&#34;&gt;Answer&lt;/h3&gt;
&lt;p&gt;Transactionデータはピアツーピアベースで共有されるため、Cordaの台帳は最適にシャーディングされ、データは必要に応じて共有／保存されます。しかし、当事者は自分が直接参加者であるTransactionを受信するだけでなく、インプットステートのすべての過去のTransactionをトレースバックし、検証を実行する必要があります。これは特定のアセット・タイプにとってはプライバシー上の課題となる可能性がありますが、以下の機能により緩和することが可能です。&lt;/p&gt;
&lt;h4 id=&#34;confidential-identities&#34;&gt;Confidential identities&lt;/h4&gt;
&lt;p&gt;公開されているアイデンティティに加えて、必要に応じてノードは自分の秘密の署名アイデンティティを自己発行することができ、これを使用してTransactionのプライバシーを保護することができます。また、保護されたプライバシーを必要に応じて解除するための組み込みFlow（IdentitySyncFlow）もあります&lt;/p&gt;
&lt;h4 id=&#34;reissuing-state&#34;&gt;Reissuing State&lt;/h4&gt;
&lt;p&gt;アセットを償還したり再発行したりすることで、Transactionチェーンのサイズを小さくすることができる他、以前のアセット所有者のプライバシーを保護することも可能です。これは必要に応じて何度でも行うことができます。&lt;/p&gt;
&lt;h4 id=&#34;transaction-tear-off&#34;&gt;Transaction Tear off&lt;/h4&gt;
&lt;p&gt;認証のために第三者（例：Oracles）にトランザクションを送信する必要がある場合があります。そのような場合において、機密性の高い要素や無関係な要素を隠したい場合がありますが、TransactionのTier offを実施することが可能です。そうすることで、特定の要素を隠さずにデータを暗号化しつつ、後で変更できないことを保証しながら、検査や署名のためにTransactionを第三者に送ることができます。&lt;/p&gt;
&lt;p&gt;さらに、以下のようなプライバシー機能を積極的に開発しています。&lt;/p&gt;
&lt;h4 id=&#34;conclave&#34;&gt;Conclave&lt;/h4&gt;
&lt;p&gt;ConclaveはR3が持つコンフィデンシャル・コンピューティングのソリューションです。セキュアなハードウェア・エンクレーブ内で契約検証を行うことで、台帳全体を効果的に暗号化することができます。すべての依存関係のある取引は、安全なハードウェア・エンクレーブの外部で暗号化されているため、当事者は過去の取引について何も知ることができません。&lt;/p&gt;
&lt;h4 id=&#34;ゼロ知識証明&#34;&gt;ゼロ知識証明&lt;/h4&gt;
&lt;p&gt;口座残高や取引金額の証明など、範囲証明のための暗号プリミティブを開発しました。&lt;/p&gt;
&lt;h4 id=&#34;membership証明の設定&#34;&gt;Membership証明の設定&lt;/h4&gt;
&lt;p&gt;特定のMembershipに属しているか否かを事前にFlow内で確認し、当該Membershipに所属を確認できない場合、Txを送信しないという形でプライバシーを確保することが可能です。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Corda Open Sourceの商用環境への利用</title>
      <link>/docs/corda-4/faq/business/corda-open-source/</link>
      <pubDate>Sun, 11 Jul 2021 17:35:31 +0900</pubDate>
      
      <guid>/docs/corda-4/faq/business/corda-open-source/</guid>
      <description>
        
        
        &lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;
&lt;p&gt;Corda Open Sourceを商用環境に使うことは可能でしょうか？ sadasdsa&lt;/p&gt;
&lt;h3 id=&#34;answer&#34;&gt;Answer&lt;/h3&gt;
&lt;p&gt;いいえ。&lt;/p&gt;
&lt;p&gt;Corda Enterpriseは商用版であり、Corda Open Sourceは公式製品サポートのつかないトライアル版です。&lt;/p&gt;
&lt;p&gt;Corda Open Sourceは誰でも無料でGithubから入手して、自由に利用することができますが、オープンソースソフトウェアなので、SBI R3 JapanまたはR3社の公式サポートを受けることができません&lt;/p&gt;
&lt;p&gt;商用利用する際のリスクは一般的に以下です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;障害発生時に公式製品サポートを利用することができないので、復旧に時間とコストがかかる、あるいは原因究明に至らない可能性がある&lt;/li&gt;
&lt;li&gt;アプリケーションのエンドユーザーがセキュリティー上の懸念を示す可能性がある&lt;/li&gt;
&lt;li&gt;サービスのリリース前判定（社内決済、社内セキュリティー・チェックリストのクリア）を通らない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Corda Enterpriseを使うことで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式の日本語製品サポート&lt;/li&gt;
&lt;li&gt;迅速なパッチ提供&lt;/li&gt;
&lt;li&gt;パフォーマンス向上（トランザクションの並行処理機能など）&lt;/li&gt;
&lt;li&gt;Corda Firewall&lt;/li&gt;
&lt;li&gt;高可用性構成&lt;/li&gt;
&lt;li&gt;が利用可能になります。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Corda Open Sourceの商用環境への利用</title>
      <link>/docs/corda-5/faq/business/corda-open-source/</link>
      <pubDate>Sun, 11 Jul 2021 17:35:31 +0900</pubDate>
      
      <guid>/docs/corda-5/faq/business/corda-open-source/</guid>
      <description>
        
        
        &lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;
&lt;p&gt;Corda Open Sourceを商用環境に使うことは可能でしょうか？ sadasdsa&lt;/p&gt;
&lt;h3 id=&#34;answer&#34;&gt;Answer&lt;/h3&gt;
&lt;p&gt;いいえ。&lt;/p&gt;
&lt;p&gt;Corda Enterpriseは商用版であり、Corda Open Sourceは公式製品サポートのつかないトライアル版です。&lt;/p&gt;
&lt;p&gt;Corda Open Sourceは誰でも無料でGithubから入手して、自由に利用することができますが、オープンソースソフトウェアなので、SBI R3 JapanまたはR3社の公式サポートを受けることができません&lt;/p&gt;
&lt;p&gt;商用利用する際のリスクは一般的に以下です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;障害発生時に公式製品サポートを利用することができないので、復旧に時間とコストがかかる、あるいは原因究明に至らない可能性がある&lt;/li&gt;
&lt;li&gt;アプリケーションのエンドユーザーがセキュリティー上の懸念を示す可能性がある&lt;/li&gt;
&lt;li&gt;サービスのリリース前判定（社内決済、社内セキュリティー・チェックリストのクリア）を通らない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Corda Enterpriseを使うことで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式の日本語製品サポート&lt;/li&gt;
&lt;li&gt;迅速なパッチ提供&lt;/li&gt;
&lt;li&gt;パフォーマンス向上（トランザクションの並行処理機能など）&lt;/li&gt;
&lt;li&gt;Corda Firewall&lt;/li&gt;
&lt;li&gt;高可用性構成&lt;/li&gt;
&lt;li&gt;が利用可能になります。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Corda Open Sourceの商用環境への利用</title>
      <link>/docs/faq/business/corda-open-source/</link>
      <pubDate>Sun, 11 Jul 2021 17:35:31 +0900</pubDate>
      
      <guid>/docs/faq/business/corda-open-source/</guid>
      <description>
        
        
        &lt;h3 id=&#34;question&#34;&gt;Question&lt;/h3&gt;
&lt;p&gt;Corda Open Sourceを商用環境に使うことは可能でしょうか？ sadasdsa&lt;/p&gt;
&lt;h3 id=&#34;answer&#34;&gt;Answer&lt;/h3&gt;
&lt;p&gt;いいえ。&lt;/p&gt;
&lt;p&gt;Corda Enterpriseは商用版であり、Corda Open Sourceは公式製品サポートのつかないトライアル版です。&lt;/p&gt;
&lt;p&gt;Corda Open Sourceは誰でも無料でGithubから入手して、自由に利用することができますが、オープンソースソフトウェアなので、SBI R3 JapanまたはR3社の公式サポートを受けることができません&lt;/p&gt;
&lt;p&gt;商用利用する際のリスクは一般的に以下です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;障害発生時に公式製品サポートを利用することができないので、復旧に時間とコストがかかる、あるいは原因究明に至らない可能性がある&lt;/li&gt;
&lt;li&gt;アプリケーションのエンドユーザーがセキュリティー上の懸念を示す可能性がある&lt;/li&gt;
&lt;li&gt;サービスのリリース前判定（社内決済、社内セキュリティー・チェックリストのクリア）を通らない可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Corda Enterpriseを使うことで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式の日本語製品サポート&lt;/li&gt;
&lt;li&gt;迅速なパッチ提供&lt;/li&gt;
&lt;li&gt;パフォーマンス向上（トランザクションの並行処理機能など）&lt;/li&gt;
&lt;li&gt;Corda Firewall&lt;/li&gt;
&lt;li&gt;高可用性構成&lt;/li&gt;
&lt;li&gt;が利用可能になります。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
